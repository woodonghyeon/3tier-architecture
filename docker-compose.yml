# version: '3.8' Docker V2부터는 version 표기를 안 해도 된다고 해서 주석 처리함

networks:
  app_network:
    driver: bridge
  monitoring_network:
    driver: bridge

services:

  fluentd:
    image: fluent/fluentd:v1.15
    networks:
      - app_network
    environment:
      FLUENTD_CONF: "fluentd.conf"
    volumes:
      - ./fluentd/fluentd.conf:/fluentd/etc/fluentd.conf
      - /var/log/nginx:/var/log/nginx
    ports:
      - "24224:24224"
      - "24224:24224/udp"

  nginx:
    build:
      context: ./nginx
    networks:
      - app_network
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "fluentd:24224"
        fluentd-async-connect: "true" # fluentd가 준비되기전 다른 컨테이너가 시작하여 멈추던 오류가 있던걸 얘가 해결해줌
        tag: "docker.nginx"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "8080:80"
    depends_on:
      - apache
      - fluentd
      - mysql
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - /var/log/nginx:/var/log/nginx

  apache:
    build:
      context: ./apache
    networks:
      - app_network
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "fluentd:24224"
        fluentd-async-connect: "true"
        tag: "docker.apache"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      - mysql
    env_file:
      - .env
    volumes:
      - ./apache/apache-config.conf:/usr/local/apache2/conf/httpd.conf
    environment:
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    ports:
      - "80:80"
    restart: always

  mysql:
    build:
      context: ./mysql
    networks:
      - app_network
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "fluentd:24224"
        fluentd-async-connect: "true"
        tag: "docker.mysql"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "mysql"]
      interval: 10s
      timeout: 5s
      retries: 3
    env_file:
      - .env
    environment:
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "3306:3306"
    volumes:
      - ./backup:/backup
      - mysql_data:/var/lib/mysql
    restart: always

  backup:
    image: mysql:latest
    networks:
      - app_network
    volumes:
      - ./backup:/backup
    env_file:
      - .env
    environment:
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    entrypoint: >
      sh -c 'until mysqladmin ping -h mysql --silent; do
              echo "Waiting for MySQL...";
              sleep 5;
            done;
            mysqldump -u${MYSQL_USER} -p${MYSQL_PASSWORD} -h mysql ${MYSQL_DATABASE} > /backup/backup.sql;
            sleep 43200;'
    depends_on:
      - mysql

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    networks:
      - app_network
      - monitoring_network
    volumes:
      - ./prometheus/config:/etc/prometheus
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--storage.tsdb.path=/prometheus'
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    networks:
      - app_network
      - monitoring_network
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: always

  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    networks:
      - monitoring_network
      - app_network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    restart: always

  mysql_exporter:
    image: prom/mysqld-exporter
    container_name: mysql_exporter
    networks:
      - monitoring_network
      - app_network
    command:
      - "--mysqld.username=test_user:testpassword"
      - "--mysqld.address=mysql:3306"
    depends_on:
      - mysql
    ports:
      - "9104:9104"
    restart: always

  apache_exporter:
    image: bitnami/apache-exporter:latest
    container_name: apache_exporter
    networks:
      - monitoring_network
      - app_network
    command:
      - --scrape_uri=http://apache:80/server-status
    ports:
      - "9117:9117"
    depends_on:
      - apache
    restart: always

  nginx_exporter:
    image: nginx/nginx-prometheus-exporter
    container_name: nginx_exporter
    networks:
      - monitoring_network
      - app_network
    ports:
      - "9113:9113"
    depends_on:
      - nginx
    command:
      - -nginx.scrape-uri
      - http://nginx:8080/stub_status
    restart: always

volumes:
  mysql_data:
  prometheus-data:
  grafana-data:

